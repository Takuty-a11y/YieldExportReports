<mah:MetroWindow x:Class="YieldExportReports.Views.Main.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:avalonDock="https://github.com/Dirkster99/AvalonDock"
        xmlns:mah="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
        xmlns:dock="clr-namespace:YieldExportReports.Views.Dock"
        xmlns:util="clr-namespace:YieldExportReports.Dock;assembly=YieldExportReports.Dock"
        xmlns:vm="clr-namespace:YieldExportReports.ViewModels.Main"
        xmlns:vmDock="clr-namespace:YieldExportReports.ViewModels.Dock"
        mc:Ignorable="d"
        Title="YieldExportReports"
        Height="600"
        Width="800"
        ResizeMode="CanResizeWithGrip"
        TitleCharacterCasing="Normal"
        WindowTransitionsEnabled="false"
        d:DataContext="{d:DesignInstance Type=vm:MainWindowViewModel,IsDesignTimeCreatable=True}"
        SaveWindowPosition="True">

    <mah:MetroWindow.RightWindowCommands>
        <mah:WindowCommands>
            <Button ToolTip="GitHubを表示">
                <Button.Content>
                    <iconPacks:PackIconMaterial Kind="Github" Width="22" Height="22" />
                </Button.Content>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <i:InvokeCommandAction Command="{Binding OpenUrlCommand}" CommandParameter="https://github.com/Takuty-a11y/YieldExportReports" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Button>
        </mah:WindowCommands>
    </mah:MetroWindow.RightWindowCommands>

    <Window.Resources>
        <util:ActiveDocumentConverter x:Key="ActiveDocumentConverter"/>
        <avalonDock:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
        <DataTemplate DataType="{x:Type vmDock:DBTreeViewTool}">
            <dock:DBTreeViewControl DataContext="{Binding Path=DataContext.DBTreeViewModel, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vmDock:ReportFieldViewTool}">
            <dock:ReportFieldViewControl DataContext="{Binding Path=DataContext.ReportFieldViewModel, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vmDock:DataGridViewTool}">
            <dock:DataGridViewControl DataContext="{Binding Path=DataContext.DataGridViewModel, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vmDock:QueryEditorDocument}">
            <dock:QueryEditorControl DataContext="{Binding Path=DataContext.QueryEditorViewModel, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vmDock:ReportEditorDocument}">
            <dock:ReportEditorControl DataContext="{Binding Path=DataContext.ReportEditorViewModel, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
        </DataTemplate>
    </Window.Resources>

    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded">
            <i:InvokeCommandAction Command="{Binding LoadedCommand}" CommandParameter="{Binding ElementName=uxDockingManager}" />
        </i:EventTrigger>
        <i:EventTrigger EventName="ContentRendered">
            <i:InvokeCommandAction Command="{Binding RenderedCommand}" />
        </i:EventTrigger>
        <i:EventTrigger EventName="Closed">
            <i:InvokeCommandAction Command="{Binding ClosedCommand}" CommandParameter="{Binding ElementName=uxDockingManager}" />
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto" />
            <RowDefinition />
            <RowDefinition Height="auto" />
        </Grid.RowDefinitions>

        <!--メニュー-->
        <StackPanel Grid.Row="0" Background="{DynamicResource MahApps.Brushes.Accent}">
            <Menu VerticalAlignment="Top" Background="{x:Null}" >
                <MenuItem Style="{StaticResource MainMenuTitle}" x:Name="menuFile" Header="ファイル(_F)">
                    <MenuItem Style="{StaticResource MenuContents}" x:Name="menuNew" Header="新規作成(_N)">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Click">
                                <i:InvokeCommandAction Command="{Binding MenuCommand}" CommandParameter="{Binding ElementName=menuNew}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </MenuItem>
                    <MenuItem Style="{StaticResource MenuContents}" x:Name="menuOpen" Header="開く(_O)">
                        <MenuItem.Icon>
                            <iconPacks:PackIconMaterial Kind="FolderOpenOutline" Foreground="DarkSlateGray" />
                        </MenuItem.Icon>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Click">
                                <i:InvokeCommandAction Command="{Binding MenuCommand}" CommandParameter="{Binding ElementName=menuOpen}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </MenuItem>
                    <Separator Style="{StaticResource MenuSeparator}" />
                    <MenuItem Style="{StaticResource MenuContents}" x:Name="menuSave" Header="保存(_S)">
                        <MenuItem.Icon>
                            <iconPacks:PackIconMaterial Kind="ContentSave" Foreground="DarkSlateBlue" />
                        </MenuItem.Icon>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Click">
                                <i:InvokeCommandAction Command="{Binding MenuCommand}" CommandParameter="{Binding ElementName=menuSave}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </MenuItem>
                    <MenuItem Style="{StaticResource MenuContents}" x:Name="menuSaveAs" Header="名前を付けて保存(_A)">
                        <MenuItem.Icon>
                            <iconPacks:PackIconMaterial Kind="ContentSaveAll" Foreground="DarkSlateBlue" />
                        </MenuItem.Icon>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Click">
                                <i:InvokeCommandAction Command="{Binding MenuCommand}" CommandParameter="{Binding ElementName=menuSaveAs}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </MenuItem>
                    <Separator Style="{StaticResource MenuSeparator}" />
                    <MenuItem Style="{StaticResource MenuContents}" x:Name="menuClose" Header="閉じる(_C)">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Click">
                                <i:InvokeCommandAction Command="{Binding MenuCommand}" CommandParameter="{Binding ElementName=menuClose}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </MenuItem>
                    <Separator Style="{StaticResource MenuSeparator}" />
                    <MenuItem Style="{StaticResource MenuContents}" Name="menuEnd" Header="終了(_X)">
                        <MenuItem.Icon>
                            <iconPacks:PackIconMaterial Kind="Power" Foreground="DarkRed" />
                        </MenuItem.Icon>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Click">
                                <i:InvokeCommandAction Command="{Binding MenuCommand}" CommandParameter="{Binding ElementName=menuEnd}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </MenuItem>
                </MenuItem>
                <MenuItem Style="{StaticResource MainMenuTitle}" x:Name="menuEdit" Header="編集(_E)">
                    <MenuItem Style="{StaticResource MenuContents}" Command="Undo">
                        <MenuItem.Icon>
                            <iconPacks:PackIconMaterial Kind="ArrowULeftTop" Foreground="DarkSlateBlue" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Style="{StaticResource MenuContents}" Command="Redo">
                        <MenuItem.Icon>
                            <iconPacks:PackIconMaterial Kind="ArrowRightTop" Foreground="DarkSlateBlue" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator Style="{StaticResource MenuSeparator}" />
                    <MenuItem Style="{StaticResource MenuContents}" Command="Cut">
                        <MenuItem.Icon>
                            <iconPacks:PackIconMaterial Kind="ContentCut" Foreground="DarkSlateGray" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Style="{StaticResource MenuContents}" Command="Copy">
                        <MenuItem.Icon>
                            <iconPacks:PackIconMaterial Kind="ContentCopy" Foreground="DarkSlateGray" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Style="{StaticResource MenuContents}" Command="Paste">
                        <MenuItem.Icon>
                            <iconPacks:PackIconMaterial Kind="ContentPaste" Foreground="DarkSlateGray" />
                        </MenuItem.Icon>
                    </MenuItem>
                </MenuItem>
                <MenuItem Style="{StaticResource MainMenuTitle}" x:Name="menuDisplay" Header="表示(_V)" ItemsSource="{Binding Tools}" >
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource MenuContents}">
                            <Setter Property="Header" Value="{Binding Title}" />
                            <Setter Property="IsCheckable" Value="True" />
                            <Setter Property="IsChecked" Value="{Binding IsVisible, Mode=TwoWay}" />
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>
                <MenuItem Style="{StaticResource MainMenuTitle}" x:Name="menuTool" Header="ツール(_T)">
                    <!--
                        <MenuItem Style="{StaticResource MenuContents}" x:Name="menuQuery" Header="クエリを実行" IsEnabled="{Binding QueryMenuEnabled, UpdateSourceTrigger=PropertyChanged}">
                            <MenuItem.Icon>
                                <iconPacks:PackIconModern Kind="ControlPlay" Foreground="{Binding QueryMenuColor}" />
                            </MenuItem.Icon>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Click">
                                    <i:InvokeCommandAction Command="{Binding ExecQueryFromMenuCommand}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </MenuItem>
                    -->
                </MenuItem>
                <MenuItem Style="{StaticResource MainMenuTitle}" x:Name="menuHelp" Header="ヘルプ(_H)">
                    <MenuItem Style="{StaticResource MenuContents}" Header="製品情報" />
                    <MenuItem Style="{StaticResource MenuContents}" x:Name="menuGitHub" Header="GitHubを表示">
                        <MenuItem.Icon>
                            <iconPacks:PackIconMaterial Kind="Github" Foreground="DarkSlateGray" />
                        </MenuItem.Icon>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Click">
                                <i:InvokeCommandAction Command="{Binding OpenUrlCommand}" CommandParameter="https://github.com/MahApps/MahApps.Metro.IconPacks" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </MenuItem>
                    <Separator Style="{StaticResource MenuSeparator}" />
                    <MenuItem Style="{StaticResource MenuContents}" Header="サードパーティーソフトウェア" />
                    <MenuItem Style="{StaticResource MenuContents}" x:Name="menuVersion" Header="バージョン情報">
                        <MenuItem.Icon>
                            <iconPacks:PackIconMaterial Kind="Information" Foreground="DarkSlateBlue" />
                        </MenuItem.Icon>
                    </MenuItem>
                </MenuItem>
            </Menu>
        </StackPanel>

        <!--ドック-->
        <avalonDock:DockingManager x:Name="uxDockingManager"
                                   DocumentsSource="{Binding Documents}"
                                   ActiveContent="{Binding ActiveDocument, Mode=TwoWay, Converter={StaticResource ActiveDocumentConverter}}"
                                   AnchorablesSource="{Binding Tools}"
                                   AllowMixedOrientation="True"
                                   Grid.Row="1">
            <avalonDock:DockingManager.Theme>
                <avalonDock:Vs2013LightTheme />
            </avalonDock:DockingManager.Theme>
            <avalonDock:DockingManager.LayoutItemContainerStyleSelector>
                <util:ContentPropertyStyleSelector />
            </avalonDock:DockingManager.LayoutItemContainerStyleSelector>

            <avalonDock:LayoutRoot>
                <avalonDock:LayoutPanel Orientation="Horizontal">
                    <avalonDock:LayoutAnchorablePane x:Name="uxAnchorablePaneTree" DockWidth="250">
                        <!-- ツールウィンドウ -->
                        <avalonDock:LayoutAnchorable ContentId="{Binding TreeViewContentID}" />
                    </avalonDock:LayoutAnchorablePane>
                    <avalonDock:LayoutPanel Orientation="Vertical">
                        <avalonDock:LayoutDocumentPane x:Name="uxDocumentEditor">
                            <!-- ドキュメント -->
                            <avalonDock:LayoutAnchorable ContentId="{Binding QueryEditorDocumentID}" />
                            <avalonDock:LayoutAnchorable ContentId="{Binding ReportEditorDocumentID}" />
                        </avalonDock:LayoutDocumentPane>
                        <avalonDock:LayoutAnchorablePane x:Name="uxAnchorablePaneResult" DockHeight="150">
                            <!-- ツールウィンドウ -->
                            <avalonDock:LayoutAnchorable ContentId="{Binding GridViewContentID}" />
                        </avalonDock:LayoutAnchorablePane>
                    </avalonDock:LayoutPanel>
                    <avalonDock:LayoutAnchorablePane x:Name="uxAnchorablePaneReport" DockWidth="250">
                        <!-- ツールウィンドウ -->
                        <avalonDock:LayoutAnchorable ContentId="{Binding ReportToolContentID}" />
                    </avalonDock:LayoutAnchorablePane>
                </avalonDock:LayoutPanel>
            </avalonDock:LayoutRoot>
        </avalonDock:DockingManager>

        <!--フッター-->
        <StatusBar Grid.Row="2" Height="24">
            <StatusBarItem Content="{Binding AppVersion}" ContentStringFormat="{}Version：{0}" />
            <Separator Style="{DynamicResource MahApps.Styles.Separator.StatusBar}" />
            <StatusBarItem Content="{Binding TargetDBType, UpdateSourceTrigger=PropertyChanged}" />
            <Separator Style="{DynamicResource MahApps.Styles.Separator.StatusBar}" />
            <StatusBarItem Content="{Binding TargetDataSource, UpdateSourceTrigger=PropertyChanged}" />
            <StatusBarItem Content="{Binding TargetDBName, UpdateSourceTrigger=PropertyChanged}" ContentStringFormat="{}[{0}]" />
            <Separator Style="{DynamicResource MahApps.Styles.Separator.StatusBar}" />
            <StatusBarItem Content="{Binding TargetSettingFile, UpdateSourceTrigger=PropertyChanged}" />
        </StatusBar>
    </Grid>
</mah:MetroWindow>
